name: Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch: # Allow manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "::set-output name=outdated::$(npm outdated --json || true)"
      
      - name: Create issue for outdated packages
        if: steps.outdated.outputs.outdated != '{}'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const outdated = JSON.parse('${{ steps.outdated.outputs.outdated }}');
            const packages = Object.keys(outdated);
            
            if (packages.length > 0) {
              const issueBody = `## Outdated Dependencies Found\n\n` +
                `The following packages are outdated:\n\n` +
                `| Package | Current | Latest | Wanted |\n` +
                `|---------|---------|--------|--------|\n` +
                packages.map(pkg => {
                  const info = outdated[pkg];
                  return `| ${pkg} | ${info.current || 'N/A'} | ${info.latest || 'N/A'} | ${info.wanted || 'N/A'} |`;
                }).join('\n') +
                `\n\nConsider updating these dependencies.`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Outdated Dependencies - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['dependencies', 'maintenance']
              });
            }
